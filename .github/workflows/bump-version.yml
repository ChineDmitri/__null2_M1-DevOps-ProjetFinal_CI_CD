name: Version Bump and Merge

on:
  pull_request:
    branches:
      - "main"
    types: [closed]

jobs:
  hadolint:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build Docker images
        run: docker-compose build

      - name: Install Hadolint
        run: docker pull hadolint/hadolint

      - name: Lint Dockerfiles
        run: docker run --rm -i hadolint/hadolint < Dockerfile.app

      - name: Lint Dockerfiles for database
        run: docker run --rm -i hadolint/hadolint < Dockerfile.bdd

  # back-end_test-and-coverage:
  #   runs-on: ubuntu-22.04

  #   services:
  #     mysql:
  #       image: mysql:8
  #       env:
  #         MYSQL_DB_HOST: localhost
  #         MYSQL_DB_PORT: 3310
  #         MYSQL_ROOT_PASSWORD: root
  #         MYSQL_DATABASE: rdv
  #         MYSQL_USER: student
  #         MYSQL_PASSWORD: student
  #       ports:
  #         - 3310:3306
  #       options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Set up Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 18

  #     - name: Install dependencies
  #       run: npm install

  #     - name: Check coverage thresholds
  #       run: npm run check-coverage-thresholds

  #     - name: Upload coverage to Coveralls
  #       run: npm run coveralls
  #       env:
  #         COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}

  version-bump:
    runs-on: ubuntu-22.04

    needs: hadolint

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Check if pull request was merged
        run: |
          if [ "${{ github.event.pull_request.merged }}" == "true" ]; then
            echo "Pull request was merged, go to bump version."
            exit 0
          else
            echo "Pull request was not merged, no bump version."
            exit 1
          fi

      # - name: Install dependencies
      #   run: npm install

      # - name: Pull Latest Changes
      #   run: git pull origin main

      - name: Determine version bump
        id: version
        run: |
          BRANCH_NAME=$(echo ${{ github.head_ref }} | tr '[:upper:]' '[:lower:]')
          if [[ $BRANCH_NAME == "fix_"* ]]; then
            echo "bump=patch" >> $GITHUB_ENV
          elif [[ $BRANCH_NAME == "feature_"* ]]; then
            echo "bump=minor" >> $GITHUB_ENV
          elif [[ $BRANCH_NAME == "release_"* ]]; then
            echo "bump=major" >> $GITHUB_ENV
          else
            echo "Unsupported branch naming convention: $BRANCH_NAME"
            exit 1
          fi

      - name: Bump version + check version in docker container from image and after update Docker image
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"

          # Run npm version after ensuring a clean working directory
          npm version ${{ env.bump }} -m "Bump version in package.json %s"

          docker-compose up -d
          docker-compose exec -T node-js-app sh -c "while [ \"\$(curl -s -o /dev/null -w '%{http_code}' http://localhost:3000/info)\" != \"200\" ]; do sleep 5; done"
          API_RESPONSE=$(docker-compose exec -T node-js-app curl -s http://localhost:3000/info)
          PACKAGE_VERSION=$(docker-compose exec -T node-js-app node -p "require('./package.json').version")
          if [ "$API_RESPONSE" != "$PACKAGE_VERSION" ]; then
            echo "Error: API response ($API_RESPONSE) does not match package.json version ($PACKAGE_VERSION)"
            exit 1
          fi

          git push origin main

          # # Update Docker image version in docker-compose
          sed -i "s|image: \"create-user-app:.*|image: \"create-user-app:$(node -p "require('./package.json').version")\"|" docker-compose.yml
          cat docker-compose.yml

          # # Add change
          git add docker-compose.yml

          cd PIF_PAF-front
          npm install
          ./node_modules/.bin/ng build --configuration=production --output-path=../volume
          git add .

          cd ..

          git commit -m "Bump version in docker-compose.yml to $(node -p "require('./package.json').version") + build volumes"

          git push origin main

          git tag -a "APP_v$(node -p "require('./package.json').version")" -m "App version $(node -p "require('./package.json').version")"
          git push origin "APP_v$(node -p "require('./package.json').version")"

      # - name: Build volumes
      #   run: |
      #     git config --global user.email "actions@github.com"
      #     git config --global user.name "GitHub Actions"

      #     cd PIF_PAF-front
      #     npm install

      #     cd ..
      #     git add .
      #     pwd

      #     git push origin main

      # - name: Update Docker Image Version
      #   run: |
      #     sed -i "s|image: \"rdv-app_backend:.*|image: \"rdv-app_backend:$(node -p "require('./package.json').version")\"|" docker-compose.yml

      # - name: Bump commit
      #   run: |
      #     git add package.json docker-compose.yml
      #     git commit -m "Bump version to $(node -p "require('./package.json').version")"

      # - name: Push Changes
      #   run: git push origin main

      # - name: Create and Push Tag
      #   run: |
      #     git tag -a "APP_v$(node -p "require('./package.json').version")" -m "App version $(node -p "require('./package.json').version")"
      #     git push origin "APP_v$(node -p "require('./package.json').version")"

      # - name: Bump version and update Docker image
      #   run: |
      #     git config --global user.email "actions@github.com"
      #     git config --global user.name "GitHub Actions"

      #     git fetch origin main
      #     git checkout main

      #     # Pull the latest changes from the remote main branch
      #     git pull origin main

      #     # Run npm version after ensuring a clean working directory
      #     npm version ${{ env.bump }}

      #     # git push origin main

      #     # Update Docker image version in docker-compose
      #     sed -i "s|image: \"rdv-app_backend:.*|image: \"rdv-app_backend:$(node -p "require('./package.json').version")\"|" docker-compose.yml

      #     # Commit changes
      #     git add package.json docker-compose.yml
      #     git commit -m "Bump version to $(node -p "require('./package.json').version")"

      #     git push origin main

      #     git tag -a "APP_v$(node -p "require('./package.json').version")" -m "App version $(node -p "require('./package.json').version")"
      #     git push origin "APP_v$(node -p "require('./package.json').version")"
      # env:
      #   GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      # - name: Push changes
      #   uses: ad-m/github-push-action@v0.7.0
      #   with:
      #     branch : back_end
      #     # force_with_lease: true
      #     tags: false
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

    # - name: Create Git tag
    #   run: git tag -a "TAG_back-end_$(node -p "require('./package.json').version")" -m "Tagging release"

    # - name: Update Docker image version in docker-compose
    #   run: |
    #     sed -i "s|image: \"rdv-app_backend:.*|image: \"rdv-app_backend:$(node -p "require('./package.json').version")\"|" docker-compose.yml

    # - name: Commit and push version change and tag
    #   run: |
    #     git config user.email "actions@github.com"
    #     git config user.name "GitHub Actions"
    #     git add package.json package-lock.json docker-compose.yml
    #     git commit -m "Bump version to $(node -p "require('./package.json').version")"
    #     git push
    #     git push origin "TAG_back-end_$(node -p "require('./package.json').version")"
    #   env:
    #     GH_TOKEN: ${{ secrets.GH_TOKEN }}

    # - name: Close Pull Request
    #   run: gh pr close -R ${{ github.repository }} -N ${{ github.event.number }}
